!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CheckedArithmetic	checked_arithmetic_detail.hpp	/^class CheckedArithmetic$/;"	c	namespace:jewel::detail
Decimal	decimal.cpp	/^Decimal::Decimal(int_type p_intval, places_type p_places):$/;"	f	class:jewel::Decimal
Decimal	decimal.cpp	/^Decimal::Decimal(string const& str): m_intval(0), m_places(0)$/;"	f	class:jewel::Decimal
Decimal	decimal.hpp	/^Decimal::Decimal(): m_intval(0), m_places(0)$/;"	f	class:jewel::Decimal
Decimal	decimal.hpp	/^class Decimal:$/;"	c	namespace:jewel
DigitStringFixture	decimal_tests.cpp	/^DigitStringFixture::DigitStringFixture()$/;"	f	class:DigitStringFixture
DigitStringFixture	decimal_tests.cpp	/^struct DigitStringFixture$/;"	s	file:
Exception	exception.cpp	/^Exception::Exception() throw()$/;"	f	class:jewel::Exception
Exception	exception.cpp	/^Exception::Exception(Exception const& rhs) throw()$/;"	f	class:jewel::Exception
Exception	exception.cpp	/^Exception::Exception(char const* p_message) throw()$/;"	f	class:jewel::Exception
Exception	exception.hpp	/^class Exception: public virtual std::exception$/;"	c	namespace:jewel
GUARD_checked_arithmetic_detail_hpp	checked_arithmetic_detail.hpp	2;"	d
GUARD_checked_arithmetic_hpp	checked_arithmetic.hpp	2;"	d
GUARD_debug_log_hpp	debug_log.hpp	2;"	d
GUARD_decimal_exceptions_hpp	decimal_exceptions.hpp	2;"	d
GUARD_decimal_hpp	decimal.hpp	2;"	d
GUARD_decimal_special_tests_hpp	decimal_special_tests.hpp	2;"	d
GUARD_exception_hpp	exception.hpp	2;"	d
GUARD_exception_special_tests_hpp	exception_special_tests.hpp	2;"	d
GUARD_num_digits_hpp	num_digits.hpp	2;"	d
GUARD_power_vector_hpp	power_vector.hpp	2;"	d
GUARD_stopwatch_hpp	stopwatch.hpp	2;"	d
JEWEL_DEBUG_LOG	debug_log.hpp	21;"	d
JEWEL_DEBUG_LOG	debug_log.hpp	23;"	d
JEWEL_DERIVED_EXCEPTION	exception.hpp	65;"	d
NUM_CAST	decimal.cpp	24;"	d	file:
NumDigits	num_digits.hpp	/^class NumDigits$/;"	c	namespace:jewel
PowerVectorFixture1	power_vector_tests.cpp	/^PowerVectorFixture1::PowerVectorFixture1()$/;"	f	class:PowerVectorFixture1
PowerVectorFixture1	power_vector_tests.cpp	/^struct PowerVectorFixture1$/;"	s	file:
PowerVectorFixture2	power_vector_tests.cpp	/^PowerVectorFixture2::PowerVectorFixture2()$/;"	f	class:PowerVectorFixture2
PowerVectorFixture2	power_vector_tests.cpp	/^struct PowerVectorFixture2$/;"	s	file:
Stopwatch	stopwatch.hpp	/^Stopwatch::Stopwatch():$/;"	f	class:jewel::Stopwatch
Stopwatch	stopwatch.hpp	/^class Stopwatch$/;"	c	namespace:jewel
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_short)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_unsigned_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_unsigned_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_unsigned_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_addition_is_unsafe_unsigned_short)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_short)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_unsigned_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_unsigned_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_unsigned_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_multiplication_is_unsafe_unsigned_short)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_short)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_unsigned_int)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_unsigned_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_unsigned_long_long)$/;"	f
TEST	checked_arithmetic_tests.cpp	/^TEST(checked_arithmetic_subtraction_is_unsafe_unsigned_short)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_assignment)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_decrement)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_direct_constructor)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_increment)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_intval)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_maximum)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_maximum_precision)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_minimum)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operations_in_combination)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_equality)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_greater_than)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_inequality)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_input)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_less_than)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_output)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_unary_minus)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_operator_unary_plus)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_parameterless_constructor)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_places)$/;"	f
TEST	decimal_tests.cpp	/^TEST(decimal_value_preservation)$/;"	f
TEST	decimal_tests.cpp	/^TEST(round_decimal)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_10_long)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_10_short)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_10_unsigned_int)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_10_unsigned_long)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_10_unsigned_short)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_base_of_2_int)$/;"	f
TEST	num_digits_tests.cpp	/^TEST(num_digits_with_default_base_int)$/;"	f
TEST	stopwatch_tests.cpp	/^TEST(construct_Stopwatch)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_addition)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_divide_equals)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_division)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_minus_equals)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_multiplication)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_multiply_equals)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_plus_equals)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_string_constructor)$/;"	f
TEST_FIXTURE	decimal_tests.cpp	/^TEST_FIXTURE(DigitStringFixture, decimal_subtraction)$/;"	f
TEST_FIXTURE	power_vector_tests.cpp	/^TEST_FIXTURE(PowerVectorFixture1, TestPowerVectorID1)$/;"	f
TEST_FIXTURE	power_vector_tests.cpp	/^TEST_FIXTURE(PowerVectorFixture1, TestPowerVectorSize1)$/;"	f
TEST_FIXTURE	power_vector_tests.cpp	/^TEST_FIXTURE(PowerVectorFixture2, TestPowerVectorID2)$/;"	f
TEST_FIXTURE	power_vector_tests.cpp	/^TEST_FIXTURE(PowerVectorFixture2, TestPowerVectorSize2)$/;"	f
add_digit	decimal_tests.cpp	/^void add_digit(string& s)$/;"	f
addition_is_unsafe	checked_arithmetic.hpp	/^bool addition_is_unsafe(T x, T y)$/;"	f	namespace:jewel
addition_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::addition_is_unsafe(boost::uint64_t x,$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(boost::int64_t x, boost::int64_t y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(int x, int y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(long x, long y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(short x, short y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(unsigned int x, unsigned int y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(unsigned long x, unsigned long y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::addition_is_unsafe(unsigned short x, unsigned short y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe_signed_integral_types	checked_arithmetic_detail.hpp	/^bool CheckedArithmetic::addition_is_unsafe_signed_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
addition_is_unsafe_unsigned_integral_types	checked_arithmetic_detail.hpp	/^bool CheckedArithmetic::addition_is_unsafe_unsigned_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
co_normalize	decimal.cpp	/^void Decimal::co_normalize(Decimal& x, Decimal& y)$/;"	f	class:jewel::Decimal
decimal_csv_test	decimal_special_tests.cpp	/^void decimal_csv_test()$/;"	f	namespace:jewel::detail
decimal_serialization_test	decimal_special_tests.cpp	/^void decimal_serialization_test()$/;"	f	namespace:jewel::detail
decimal_speed_test	decimal_special_tests.cpp	/^void decimal_speed_test()$/;"	f	namespace:jewel::detail
detail	checked_arithmetic_detail.cpp	/^namespace detail$/;"	n	namespace:jewel	file:
detail	checked_arithmetic_detail.hpp	/^namespace detail$/;"	n	namespace:jewel
detail	decimal_special_tests.cpp	/^namespace detail$/;"	n	namespace:jewel	file:
detail	decimal_special_tests.hpp	/^namespace detail$/;"	n	namespace:jewel
detail	exception_special_tests.cpp	/^namespace detail$/;"	n	namespace:jewel	file:
detail	exception_special_tests.hpp	/^namespace detail$/;"	n	namespace:jewel
implicit_divisor	decimal.cpp	/^Decimal::implicit_divisor() const$/;"	f	class:jewel::Decimal
insert_from_end	decimal_tests.cpp	/^void insert_from_end(char c, string& s, string::size_type n)$/;"	f
int_type	decimal.hpp	/^	typedef boost::int64_t int_type;$/;"	t	class:jewel::Decimal
int_type	decimal_tests.cpp	/^typedef Decimal::int_type int_type;$/;"	t	file:
intval	decimal.hpp	/^Decimal::intval() const$/;"	f	class:jewel::Decimal
is_dagger	decimal_special_tests.cpp	/^bool is_dagger(char c)$/;"	f	namespace:jewel::detail
jewel	checked_arithmetic.hpp	/^namespace jewel$/;"	n
jewel	checked_arithmetic_detail.cpp	/^namespace jewel$/;"	n	file:
jewel	checked_arithmetic_detail.hpp	/^namespace jewel$/;"	n
jewel	decimal.cpp	/^namespace jewel$/;"	n	file:
jewel	decimal.hpp	/^namespace jewel$/;"	n
jewel	decimal_exceptions.hpp	/^namespace jewel$/;"	n
jewel	decimal_special_tests.cpp	/^namespace jewel$/;"	n	file:
jewel	decimal_special_tests.hpp	/^namespace jewel$/;"	n
jewel	exception.cpp	/^namespace jewel$/;"	n	file:
jewel	exception.hpp	/^namespace jewel$/;"	n
jewel	exception_special_tests.cpp	/^namespace jewel$/;"	n	file:
jewel	exception_special_tests.hpp	/^namespace jewel$/;"	n
jewel	num_digits.cpp	/^namespace jewel$/;"	n	file:
jewel	num_digits.hpp	/^namespace jewel$/;"	n
jewel	power_vector.hpp	/^namespace jewel$/;"	n
jewel	stopwatch.hpp	/^namespace jewel$/;"	n
log	stopwatch.hpp	/^std::ostream& Stopwatch::log(std::ostream& os) const$/;"	f	class:jewel::Stopwatch
m_intval	decimal.hpp	/^	int_type m_intval;$/;"	m	class:jewel::Decimal
m_message	exception.hpp	/^	char m_message[s_message_buffer_size];$/;"	m	class:jewel::Exception
m_places	decimal.hpp	/^	places_type m_places;$/;"	m	class:jewel::Decimal
m_start_time	stopwatch.hpp	/^	std::clock_t m_start_time;$/;"	m	class:jewel::Stopwatch
main	main.cpp	/^int main()$/;"	f
max_message_size	exception.cpp	/^size_t Exception::max_message_size() throw()$/;"	f	class:jewel::Exception
maximum	decimal.cpp	/^Decimal Decimal::maximum()$/;"	f	class:jewel::Decimal
maximum_precision	decimal.hpp	/^Decimal::places_type Decimal::maximum_precision()$/;"	f	class:jewel::Decimal
minimum	decimal.cpp	/^Decimal Decimal::minimum()$/;"	f	class:jewel::Decimal
multiplication_is_unsafe	checked_arithmetic.hpp	/^bool multiplication_is_unsafe(T x, T y)$/;"	f	namespace:jewel
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^  multiplication_is_unsafe(unsigned short x, unsigned short y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::multiplication_is_unsafe(boost::uint64_t x,$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::multiplication_is_unsafe(unsigned int x, unsigned int y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::multiplication_is_unsafe(unsigned long x, unsigned long y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::multiplication_is_unsafe$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::multiplication_is_unsafe(int x, int y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::multiplication_is_unsafe(long x, long y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::multiplication_is_unsafe(short x, short y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe_signed_integral_types	checked_arithmetic_detail.hpp	/^CheckedArithmetic::multiplication_is_unsafe_signed_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
multiplication_is_unsafe_unsigned_integral_types	checked_arithmetic_detail.hpp	/^CheckedArithmetic::multiplication_is_unsafe_unsigned_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
num_digits	num_digits.cpp	/^NumDigits::num_digits(boost::int64_t x, boost::int64_t base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(boost::uint64_t x, boost::uint64_t base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(int x, int base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(long x, long base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(short x, short base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(unsigned int x, unsigned int base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(unsigned long x, unsigned long base)$/;"	f	class:jewel::NumDigits
num_digits	num_digits.cpp	/^NumDigits::num_digits(unsigned short x, unsigned short base)$/;"	f	class:jewel::NumDigits
num_digits_aux	num_digits.hpp	/^std::size_t NumDigits::num_digits_aux(T x, T base)$/;"	f	class:jewel::NumDigits
operator *=	decimal.cpp	/^Decimal& Decimal::operator*=(Decimal rhs)$/;"	f	class:jewel::Decimal
operator +	decimal.hpp	/^Decimal operator+(Decimal const& d)$/;"	f	namespace:jewel
operator ++	decimal.cpp	/^Decimal const& Decimal::operator++()$/;"	f	class:jewel::Decimal
operator +=	decimal.cpp	/^Decimal& Decimal::operator+=(Decimal rhs)$/;"	f	class:jewel::Decimal
operator -	decimal.cpp	/^Decimal operator-(Decimal const& d)$/;"	f	namespace:jewel
operator --	decimal.cpp	/^Decimal const& Decimal::operator--()$/;"	f	class:jewel::Decimal
operator -=	decimal.cpp	/^Decimal& Decimal::operator-=(Decimal rhs)$/;"	f	class:jewel::Decimal
operator /=	decimal.cpp	/^Decimal& Decimal::operator\/=(Decimal rhs)$/;"	f	class:jewel::Decimal
operator <	decimal.cpp	/^bool Decimal::operator<(Decimal rhs) const$/;"	f	class:jewel::Decimal
operator <<	decimal.hpp	/^operator<<(std::basic_ostream<charT, traits>& os, Decimal const& d)$/;"	f	namespace:jewel
operator =	decimal.hpp	/^Decimal& Decimal::operator=(Decimal const& rhs)$/;"	f	class:jewel::Decimal
operator ==	decimal.cpp	/^bool Decimal::operator==(Decimal rhs) const$/;"	f	class:jewel::Decimal
operator >>	decimal.hpp	/^operator>>(std::basic_istream<charT, traits>& is, Decimal& d)$/;"	f	namespace:jewel
output_aux	decimal.cpp	/^Decimal::output_aux(ostringstream& oss) const$/;"	f	class:jewel::Decimal
places	decimal.hpp	/^Decimal::places() const$/;"	f	class:jewel::Decimal
places_type	decimal.hpp	/^	typedef unsigned short places_type;$/;"	t	class:jewel::Decimal
places_type	decimal_tests.cpp	/^typedef Decimal::places_type places_type;$/;"	t	file:
power_vector	power_vector.hpp	/^power_vector(std::vector<T> const& v)$/;"	f	namespace:jewel
power_vector0	power_vector_tests.cpp	/^	vector< vector<int> > power_vector0;$/;"	m	struct:PowerVectorFixture1	file:
power_vector0	power_vector_tests.cpp	/^	vector< vector<string> > power_vector0;$/;"	m	struct:PowerVectorFixture2	file:
rationalize	decimal.cpp	/^Decimal::rationalize(places_type min_places)$/;"	f	class:jewel::Decimal
rescale	decimal.cpp	/^int Decimal::rescale(places_type p_places)$/;"	f	class:jewel::Decimal
round	decimal.cpp	/^Decimal round(Decimal const& x, Decimal::places_type decimal_places)$/;"	f	namespace:jewel
s_base	decimal.cpp	/^Decimal::s_base = 10;$/;"	m	class:jewel::Decimal::Decimal	file:
s_base	decimal.hpp	/^	static int_type const s_base;$/;"	m	class:jewel::Decimal
s_divisor_lookup	decimal.hpp	/^	static std::vector<int_type> s_divisor_lookup;$/;"	m	class:jewel::Decimal
s_max_digits_less_one	decimal_tests.cpp	/^	string s_max_digits_less_one;$/;"	m	struct:DigitStringFixture	file:
s_max_digits_less_one_places_2	decimal_tests.cpp	/^	string s_max_digits_less_one_places_2;$/;"	m	struct:DigitStringFixture	file:
s_max_digits_one_and_zeroes	decimal_tests.cpp	/^	string s_max_digits_one_and_zeroes;$/;"	m	struct:DigitStringFixture	file:
s_max_digits_one_and_zeroes_places_2	decimal_tests.cpp	/^	string s_max_digits_one_and_zeroes_places_2;$/;"	m	struct:DigitStringFixture	file:
s_max_digits_plus_one	decimal_tests.cpp	/^	string s_max_digits_plus_one;$/;"	m	struct:DigitStringFixture	file:
s_max_digits_plus_one_places_2	decimal_tests.cpp	/^	string s_max_digits_plus_one_places_2;$/;"	m	struct:DigitStringFixture	file:
s_max_int_type	decimal_tests.cpp	/^	string s_max_int_type;$/;"	m	struct:DigitStringFixture	file:
s_max_int_type_places_2	decimal_tests.cpp	/^	string s_max_int_type_places_2;$/;"	m	struct:DigitStringFixture	file:
s_max_places	decimal.cpp	/^Decimal::s_max_places = NumDigits::num_digits$/;"	m	class:jewel::Decimal	file:
s_max_places	decimal.hpp	/^	static size_t const s_max_places;$/;"	m	class:jewel::Decimal
s_message_buffer_size	exception.hpp	/^	static size_t const s_message_buffer_size = 200;$/;"	m	class:jewel::Exception
s_min_int_type	decimal_tests.cpp	/^	string s_min_int_type;$/;"	m	struct:DigitStringFixture	file:
s_min_int_type_places_2	decimal_tests.cpp	/^	string s_min_int_type_places_2;$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_less_one	decimal_tests.cpp	/^	string s_neg_max_digits_less_one;  \/\/ with a negative sign$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_less_one_places_2	decimal_tests.cpp	/^	string s_neg_max_digits_less_one_places_2;$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_one_and_zeroes	decimal_tests.cpp	/^	string s_neg_max_digits_one_and_zeroes;  \/\/ negative$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_one_and_zeroes_places_2	decimal_tests.cpp	/^	string s_neg_max_digits_one_and_zeroes_places_2;$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_plus_one	decimal_tests.cpp	/^	string s_neg_max_digits_plus_one;$/;"	m	struct:DigitStringFixture	file:
s_neg_max_digits_plus_one_places_2	decimal_tests.cpp	/^	string s_neg_max_digits_plus_one_places_2;$/;"	m	struct:DigitStringFixture	file:
s_neg_max_int_type	decimal_tests.cpp	/^	string s_neg_max_int_type;  \/\/ Negative of same$/;"	m	struct:DigitStringFixture	file:
s_neg_max_int_type_places_2	decimal_tests.cpp	/^	string s_neg_max_int_type_places_2;$/;"	m	struct:DigitStringFixture	file:
s_rounding_threshold	decimal.cpp	/^Decimal::s_rounding_threshold = 5;$/;"	m	class:jewel::Decimal::Decimal	file:
s_rounding_threshold	decimal.hpp	/^	static int_type const s_rounding_threshold;$/;"	m	class:jewel::Decimal
s_spot	decimal.cpp	/^Decimal::s_spot = '.';$/;"	m	class:jewel::Decimal	file:
s_spot	decimal.hpp	/^	static char const s_spot;$/;"	m	class:jewel::Decimal
s_truncation_flag	exception.cpp	/^char const* Exception::s_truncation_flag = "[TRUNCATED]";$/;"	m	class:jewel::Exception	file:
s_truncation_flag	exception.hpp	/^	static char const* s_truncation_flag;$/;"	m	class:jewel::Exception
seconds_elapsed	stopwatch.hpp	/^double Stopwatch::seconds_elapsed() const$/;"	f	class:jewel::Stopwatch
serialize	decimal.hpp	/^void Decimal::serialize(Archive& ar, unsigned int const version)$/;"	f	class:jewel::Decimal
subtraction_is_unsafe	checked_arithmetic.hpp	/^bool subtraction_is_unsafe(T x, T y)$/;"	f	namespace:jewel
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::subtraction_is_unsafe(boost::uint64_t x,$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::subtraction_is_unsafe(unsigned long x, unsigned long y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^CheckedArithmetic::subtraction_is_unsafe(unsigned short x, unsigned short y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::subtraction_is_unsafe$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::subtraction_is_unsafe(int x, int y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::subtraction_is_unsafe(long x, long y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::subtraction_is_unsafe(short x, short y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe	checked_arithmetic_detail.cpp	/^bool CheckedArithmetic::subtraction_is_unsafe(unsigned int x, unsigned int y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe_signed_integral_types	checked_arithmetic_detail.hpp	/^bool CheckedArithmetic::subtraction_is_unsafe_signed_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
subtraction_is_unsafe_unsigned_integral_types	checked_arithmetic_detail.hpp	/^CheckedArithmetic::subtraction_is_unsafe_unsigned_integral_types(T x, T y)$/;"	f	class:jewel::detail::CheckedArithmetic
test_exception_macros	exception_special_tests.cpp	/^void test_exception_macros()$/;"	f	namespace:jewel::detail
vector0	power_vector_tests.cpp	/^	vector<int> vector0;$/;"	m	struct:PowerVectorFixture1	file:
vector0	power_vector_tests.cpp	/^	vector<string> vector0;$/;"	m	struct:PowerVectorFixture2	file:
vector0_0	power_vector_tests.cpp	/^	vector<int> vector0_0;$/;"	m	struct:PowerVectorFixture1	file:
vector0_0	power_vector_tests.cpp	/^	vector<string> vector0_0;$/;"	m	struct:PowerVectorFixture2	file:
vector0_1	power_vector_tests.cpp	/^	vector<int> vector0_1;$/;"	m	struct:PowerVectorFixture1	file:
vector0_1	power_vector_tests.cpp	/^	vector<string> vector0_1;$/;"	m	struct:PowerVectorFixture2	file:
vector0_2	power_vector_tests.cpp	/^	vector<int> vector0_2;$/;"	m	struct:PowerVectorFixture1	file:
vector0_2	power_vector_tests.cpp	/^	vector<string> vector0_2;$/;"	m	struct:PowerVectorFixture2	file:
vector0_3	power_vector_tests.cpp	/^	vector<int> vector0_3;$/;"	m	struct:PowerVectorFixture1	file:
vector0_3	power_vector_tests.cpp	/^	vector<string> vector0_3;$/;"	m	struct:PowerVectorFixture2	file:
vector0_4	power_vector_tests.cpp	/^	vector<int> vector0_4;$/;"	m	struct:PowerVectorFixture1	file:
vector0_5	power_vector_tests.cpp	/^	vector<int> vector0_5;$/;"	m	struct:PowerVectorFixture1	file:
vector0_6	power_vector_tests.cpp	/^	vector<int> vector0_6;$/;"	m	struct:PowerVectorFixture1	file:
vector0_7	power_vector_tests.cpp	/^	vector<int> vector0_7;$/;"	m	struct:PowerVectorFixture1	file:
what	exception.cpp	/^char const* Exception::what() const throw()$/;"	f	class:jewel::Exception
~DigitStringFixture	decimal_tests.cpp	/^	~DigitStringFixture()$/;"	f	struct:DigitStringFixture
~Exception	exception.cpp	/^Exception::~Exception() throw()$/;"	f	class:jewel::Exception
~PowerVectorFixture1	power_vector_tests.cpp	/^	~PowerVectorFixture1()$/;"	f	struct:PowerVectorFixture1
~PowerVectorFixture2	power_vector_tests.cpp	/^	~PowerVectorFixture2()$/;"	f	struct:PowerVectorFixture2
