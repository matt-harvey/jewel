Copyright 2012-2013 Matthew Harvey

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


DEPENDENCIES

Jewel is written in standard C++, and utilizes some C++11 features.
To build and install the library, you will need:

	- A reasonably conformant C++ compiler and standard library implementation
	  (Jewel has been successfully built with GCC 4.6.1 and with later
	  versions; it has not been tested with other compilers)

	- CMake (version 2.6 or later)

	- The following headers from the Boost C++ libraries (compiled Boost
	  binaries are not required) (version 1.53.0 or later)
		
		- <boost/algorithm/string.hpp>
		- <boost/numeric/conversion/cast.hpp>
		- <boost/lexical_cast.hpp>
		- <boost/optional.hpp>

To build and run the test suite for Jewel, you will need:
	
	- UnitTest++ (known to work with version 1.4)

To build the API documentation, you will need:

	- Doxygen (known to work with version 1.8.3.1)

At the time of writing, these dependencies can be obtained from the following
locations:
	
	CMake: 		http://www.cmake.org
	Boost:		http://www.boost.org
	UnitTest++:	http://unittest-cpp.sourceforge.net
	Doxygen:	http://www.stack.nl/~dimitri/doxygen


STEP 1. INITIAL BUILD CONFIGURATION

Open a command line and "cd" to the project root.

On Unix-like systems, enter:

	cmake -i

(On Windows, you will need to use the -G option to choose a Makefile
generator, or else run "cmake-gui.exe .". See CMake documentation for further
details.)

You will be prompted with "Would you like to see the advanced options? [No]:".
Answer "n". Then follow the prompts.

If you run into trouble with the build or have atypical requirements, you can
return to this step and answer "y" to configure more detailed build options.


STEP 2. BUILD THE LIBRARY

At the project root, enter:

	make jewel


STEP 3. BUILD AND RUN THE TEST SUITE

This step is optional, but recommended. At the project root, enter:

	make test

To run the tests, on a Unix-like system, enter:

	./test

On Windows, enter:

	.\test.exe

The result of the tests will then be displayed. If any tests fail,
it would be appreciated if you would send the developer your test output along
with details of your system and build environment. (See README for contact
details.) If any tests fail, you should not install or use the library.


STEP 4. TO INSTALL THE LIBRARY

At the project root, enter:
	
	make install

If on a Unix-like system, you may need to run this as root, i.e.:

	sudo make install

Assuming installation is successful, CMake will output the location of each
installed file.


TO BUILD THE API DOCUMENTATION

If you have Doxygen installed and want to generate API documentation, then
enter the following at the project root:

	make docs

HTML documentation will then be generated in the project root directory,
under "html", and can be browsed by opening the following file in your
web browser:

	[project root]/html/index.html


TO BUILD A SOURCE PACKAGE FOR DISTRIBUTION

If you are running a Unix-like system, and have a "tar" program installed,
you can build a tarball of the library sources by entering the following
at the project root:
	
	make package


TO BUILD EVERYTHING IN ONE GO

To build the library, tests, documentation and tarball with one command,
go to the project root, and enter:

	make

Note this will NOT actually install the library, however.


TOOLS

The source distribution comes with a "tools" directory, containing one
or more standalone scripts which may be useful in connection with the library.
These are not part of the "core library", are not required in order to use the
library, and will NOT be installed by "make install". (Library users can
install these if desired simply by copying them to a location in their
PATH.) The documentation on each script is contained in the script file itself.
